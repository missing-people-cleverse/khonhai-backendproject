import express from "express";
import multer from "multer";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import { v4 as uuidv4 } from "uuid";
import dotenv from "dotenv";

dotenv.config();

// Initialize AWS S3 client
const bucketName = process.env.AWS_BUCKET_NAME || "your-bucket-name";
const region = process.env.AWS_BUCKET_REGION || "your-bucket-region";
const accessKeyId = process.env.AWS_ACCESS_KEY_ID || "";
const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY || "";

const s3Client = new S3Client({
  region,
  credentials: {
    accessKeyId,
    secretAccessKey,
  },
});

// Set up Multer storage
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const app = express();

// Route for image upload
app.post("/upload", upload.single("image"), async (req, res) => {
  try {
    const file = req.file;
    if (!file) {
      return res.status(400).json({ error: "No image file provided" });
    }

    const imageKey = `${uuidv4()}-${file.originalname}`;
    const uploadParams = {
      Bucket: bucketName,
      Body: file.buffer,
      Key: imageKey,
      ContentType: file.mimetype,
    };

    await s3Client.send(new PutObjectCommand(uploadParams));

    const imageUrl = `https://${bucketName}.s3.${region}.amazonaws.com/${imageKey}`;
    return res.json({ imageUrl }); // Add a return statement here
  } catch (err) {
    console.error("Error uploading image:", err);
    return res.status(500).json({ error: "Failed to upload image" }); // Add a return statement here
  }
});

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
