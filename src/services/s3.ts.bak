import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import express from "express";

import multer from "multer";
import crypto from "crypto";

import { PrismaClient } from "@prisma/client";

import dotenv from "dotenv";

dotenv.config();

const bucketName = process.env.AWS_BUCKET_NAME ?? "khonhai-bucket";
const region = process.env.AWS_BUCKET_REGION ?? "ap-southeast-1";
const accessKeyId = process.env.AWS_ACCESS_KEY ?? "";
const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY ?? "";

const s3Client = new S3Client({
  region,
  credentials: {
    accessKeyId,
    secretAccessKey,
  },
});

function uploadFile(file, fileName, mimetype) {
  const uploadParams = {
    Bucket: bucketName,
    Body: file,
    Key: fileName,
    ContentType: mimetype,
  };

  return s3Client.send(new PutObjectCommand(uploadParams));
}

const app = express();
const prisma = new PrismaClient();

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const generateFileName = (bytes = 32) =>
  crypto.randomBytes(bytes).toString("hex");

app.post("/posts", upload.single("image"), async (req, res) => {
  try {
    const file = req.file;
    if (!file) {
      throw new Error("No file uploaded"); // Throw an error if no file is uploaded
    }

    const imageName = generateFileName();
    const {
      name,
      surname,
      nickname,
      img,
      nationality,
      ageLastSeen,
      dateOfBirth,
      gender,
      weight,
      height,
      skin,
      remark,
      status,
      province,
      place,
      missingDatetime,
      missingDetail,
      user,
    } = req.body.content;

    await uploadFile(file.buffer, imageName, file.mimetype);

    const post = await prisma.content.create({
      data: {
        name,
        surname,
        nickname,
        img: imageName,
        nationality,
        ageLastSeen,
        dateOfBirth,
        gender,
        weight,
        height,
        skin,
        remark,
        status,
        province,
        place,
        missingDatetime,
        missingDetail,
        user,
      },
    });

    res.status(201).send(post);
  } catch (error) {
    console.error(error.message);
    res.status(500).send("Server Error");
  }
});

app.listen(8080, () => console.log("listening on port 8080"));
